name: CI Pipeline

on:
  push:
    branches:
      - main
  
  pull_request:
    branches:
      - main

  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: false
        default: 'Manual trigger'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  

      # Step 2: Set up Java
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      # Step 3: Set up Docker
      - name: Set up Docker
        run: |
          echo "Setting up Docker..."
          docker --version
          docker compose version
          echo "Docker setup complete."

      # Step 4: Build the container
      - name: Build Docker container
        run: |
          echo "Building Docker container using docker-compose.yaml..."
          docker compose -f docker-compose.yaml build
          docker compose -f docker-compose.yaml up -d

      - name: Gradle Build
        run: ./gradlew clean assemble

        #Step 6 : Start Gradle Application server
      - name: Start Gradle Application server
        run: |
          # Start the application server in the background
          ./gradlew apprun &
          sleep 30
          echo "Gradle application server started."
      
      # Step 5: Wait for SonarQube to start and create project
      - name: Wait for SonarQube and create project
        run: |
          echo "Waiting for SonarQube to be ready..."
          # Wait for SonarQube to become available (max 2 minutes)
          timeout 120 bash -c 'until curl -s http://localhost:9000/api/system/status | grep -q "UP"; do echo "Waiting for SonarQube..."; sleep 10; done'
          
          echo "Creating SonarQube project..."
          curl -s -u admin:admin -X POST "http://localhost:9000/api/projects/create" \
            -d "name=ensf400 Library System" \
            -d "project=ensf400-library" || echo "Project may already exist, continuing..."

      - name: Change SonarQube Admin Password
        run: |
          echo "Changing SonarQube admin password..."
          curl -u admin:admin -X POST "http://localhost:9000/api/users/change_password" \
            -d "login=admin" \
            -d "password=themotherfuckingpassword" \
            -d "previousPassword=admin"

      # Step 7: Run unit tests
      - name: Run Unit Tests
        run: |
          ./gradlew test
          echo "Unit tests completed."
          
      # Step 8: Run SonarQube analysis
      - name: Run SonarQube Analysis
        run: |
          echo "Running SonarQube analysis..."
          ./gradlew sonarqube \
            -Dsonar.projectKey=ensf400-library \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=admin \
            -Dsonar.password=themotherfuckingpassword  
          echo "SonarQube analysis completed."
          
      # Step 9: Generate and save SonarQube report
      - name: Generate SonarQube Report
        run: |
          echo "Generating SonarQube report..."
          # Wait for SonarQube to process results
          sleep 10

          # Export issues report to a file
          curl -u admin:themotherfuckingpassword -o sonarqube-issues.json \
            "http://localhost:9000/api/issues/search?projectKeys=ensf400-library&resolved=false"

          # Export quality gate status
          curl -u admin:themotherfuckingpassword -o sonarqube-quality-gate.json \
            "http://localhost:9000/api/qualitygates/project_status?projectKey=ensf400-library"

          # Export measures/metrics
          curl -u admin:themotherfuckingpassword -o sonarqube-measures.json \
            "http://localhost:9000/api/measures/component?component=ensf400-library&metricKeys=ncloc,complexity,violations,coverage,duplicated_lines_density"

          echo "SonarQube reports generated"

      # Step 10: Upload reports as artifacts
      - name: Upload SonarQube Reports
        uses: actions/upload-artifact@v3
        with:
          name: sonarqube-reports
          path: |
            sonarqube-issues.json
            sonarqube-quality-gate.json
            sonarqube-measures.json
