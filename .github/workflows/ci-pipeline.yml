name: CI Pipeline

on:
  push:
    branches:
      - main
  
  pull_request:
    branches:
      - main

  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: false
        default: 'Manual trigger'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  

      # Step 2: Set up Java
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      # Step 3: Set up Docker
      - name: Set up Docker
        run: |
          echo "Setting up Docker..."
          docker --version
          docker compose version
          echo "Docker setup complete."

      # Step 4: Build the container
      - name: Build Docker container
        run: |
          echo "Building Docker container using docker-compose.yaml..."
          docker compose -f docker-compose.yaml build
          docker compose -f docker-compose.yaml up -d
      
      # Step 5: Wait for SonarQube to start and create project
      - name: Wait for SonarQube and create project
        run: |
          echo "Waiting for SonarQube to be ready..."
          # Wait for SonarQube to become available (max 2 minutes)
          timeout 120 bash -c 'until curl -s http://localhost:9000/api/system/status | grep -q "UP"; do echo "Waiting for SonarQube..."; sleep 10; done'
          
          echo "Creating SonarQube project..."
          curl -s -u admin:admin -X POST "http://localhost:9000/api/projects/create" \
            -d "name=ensf400 Library System" \
            -d "project=ensf400-library" || echo "Project may already exist, continuing..."
      
      # Step 6: Run unit and integration tests (no server needed)
      - name: Run Unit and Integration Tests
        run: |
          echo "Running Gradle tests that don't require a server..."
          docker exec mycontainer ./gradlew test
          docker exec mycontainer ./gradlew integrate
          docker exec mycontainer ./gradlew generateCucumberReports
          echo "Base tests completed."

      # Step 7: Run API and UI tests (server needed)
      - name: Run API and UI Tests
        run: |
          echo "Starting application server..."
          # Start the app in the background
          docker exec -d mycontainer ./gradlew apprun
          
          # Wait for server to start
          echo "Waiting for application server to start..."
          sleep 30
          
          # Run tests that need a server
          echo "Running API tests..."
          docker exec mycontainer ./gradlew runApiTests || true
          
          echo "API and UI tests completed."
          
      # Step 8: Run SonarQube analysis
      - name: Run SonarQube Analysis
        run: |
          echo "Running SonarQube analysis..."
          ./gradlew sonarqube \
            -Dsonar.projectKey=ensf400-library \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=admin \
            -Dsonar.password=ensf400 \
          echo "SonarQube analysis completed."
